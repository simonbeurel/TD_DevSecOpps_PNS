version: 2.1

# List of all environment variables accessible in this config file
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Recommendations
# ---------------

# General Principles:
#
#  1. Descriptive: The job name should clearly describe what the job does.
#  2. Concise: Names should be as short as possible while still being descriptive.
#  3. Consistent: Use a consistent format or pattern for all job names.
#  4. Avoid Ambiguous Abbreviations: If you use abbreviations, ensure they are widely understood.
#
# Naming Convention Proposal:
#
#  1. Prefixes based on the nature of the job:
#     - build-: for jobs related to building or installation.
#     - lint-: for jobs related to code quality checking.
#     - test-: for jobs related to testing.
#     - security-: for jobs related to security.
#     - metrics-: for jobs related to metrics generation.
#     - deploy-: for jobs related to deployment.
#     - notify-: for jobs related to notifications.
#     - debug-: for jobs related to debugging.
#     - setup-: for jobs related to set up.
#     - init-: for jobs related to initialization.
#     - generate-: for jobs related to generation.
#     - validate-: for jobs related to validation.
#     - compile-: for jobs related to compilation.
#     - e2e-: for jobs related to end-to-end testing.
#
#  2. Suffixes based on the specific tool or task:
#  For example, for a job that uses PHP_CodeSniffer, use phpcs as a suffix.


# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/php:8.2
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.1-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost



jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Home directory: $HOME"
            echo "Current shell: $SHELL"
            echo "Operating system: $(uname -a)"
            echo "Current path: $PATH"
            echo "Current working directory: $(pwd)"
            echo "Current date: $(date)"
            echo "--------------------"
            env

  quality_check:
    executor: php-executor
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Install phpmd and php-doc-check
          command: |
            composer require --dev phpmd/phpmd
            composer require --dev niels-de-blaauw/php-doc-check
      - run:
          name: Run PHPMD
          command: ./run_phpmd_tests.sh > phpmd_report.txt
      - run:
          name: Run PHP Doc Check
          command: ./vendor/bin/php-doc-check src > phpdoc_report.txt
      - store_artifacts:
          path: phpmd_report.txt
          destination: phpmd_report.txt
      - store_artifacts:
          path: phpdoc_report.txt
          destination: phpdoc_report.txt

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace


  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=*" "phpcompatibility/php-compatibility=*"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.txt --report=checkstyle --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            else
              exit $result
            fi
      - store_artifacts:
          path: phpcs-report.txt
          destination: phpcs-report



  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run local-php-security-checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report



  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit
  
  test-phpunit-feature:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run Feature Tests
          command: ./vendor/bin/phpunit --testsuite=Feature
  
  test-end-to-end:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if E2E folder exists
          command: |
            if [ ! -d "tests/E2E" ]; then
              echo "E2E folder not found, skipping job."
              circleci step halt
            fi
      - run:
          name: Run all E2E scripts
          command: |
            for script in tests/E2E/*.sh; do
              if [ -x "$script" ]; then
                echo "Executing $script..."
                bash "$script" || exit 1
              else
                echo "Skipping non-executable script: $script"
              fi
            done


  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Push Docker Image to GHCR (GitHub Container Registry)
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi

            # Sanitize the repository name and branch name
            REPOSITORY=$(echo "ghcr.io/$GHCR_USERNAME/$CIRCLE_REPONAME" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            TAG=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr -cd '[:alnum:]._-' | cut -c 1-128)

            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Build the Docker image
            docker build \
            -f Docker/Dockerfile \
            -t $REPOSITORY:$TAG \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg TAG="${TAG}" \
            --build-arg GIT_COMMIT=$(git rev-parse -q --verify HEAD) \
            --build-arg GIT_URL=$(echo ${CIRCLE_REPOSITORY_URL} | sed -e 's/^git@/https:\/\//g' -e 's/\.git$//g' -e 's/:/\//g') \
            --build-arg SQLITE_VERSION=3430200 \
            --build-arg SQLITE_YEAR=2023 \
            --build-arg PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME \
            .

            #Echo data for visualize
            echo "REPOSITORY: $REPOSITORY"
            echo "TAG: $TAG"

            # Push the Docker image
            docker push $REPOSITORY:$TAG


  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - deploy:
          name: Deploy to Staging
          command: |
            echo "Deploy on staging server...."
            ssh -o StrictHostKeyChecking=no ubuntu@ec2-35-180-47-91.eu-west-3.compute.amazonaws.com \<< EOF
            echo "Done1"
            sudo su
            echo "Done2"
            docker pull ghcr.io/simonbeurel/tddevsecoppspns:staging
            echo "Done3"
            docker stop $(docker ps -q --filter "ancestor=ghcr.io/simonbeurel/tddevsecoppspns:staging")
            echo "Done4"
            docker run -d \
              -p 8090:80 \
              --env-file <(infisical export --format=dotenv) \
              ghcr.io/simonbeurel/tddevsecoppspns:staging
            echo "Done5"
            EOF


  deploy-ssh-production:
    executor: simple-executor
    steps:
      - deploy:
          name: Deploy to Production
          command: |
            echo "Deploy on production server...."
            ssh -o StrictHostKeyChecking=no ubuntu@ec2-35-180-47-91.eu-west-3.compute.amazonaws.com \<< EOF
            echo "Done1"
            sudo su
            echo "Done2"
            docker pull ghcr.io/simonbeurel/tddevsecoppspns:main
            echo "Done3"
            docker stop $(docker ps -q --filter "ancestor=ghcr.io/simonbeurel/tddevsecoppspns:main")
            echo "Done4"
            docker run -d -p 8080:80 ghcr.io/simonbeurel/tddevsecoppspns:main
            echo "Done5"
            EOF

  phpmetrics:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHPMetrics
          command: composer require --dev phpmetrics/phpmetrics
      - run:
          name: Run PHPMetrics
          command: ./vendor/bin/phpmetrics --report-html=phpmetrics-report.html --report-xml=phpmetrics-report.xml --report-json=phpmetrics-report.json --ignore=vendor/ .
      - store_artifacts:
          path: phpmetrics-report.html
          destination: phpmetrics-report
      - store_artifacts:
          path: phpmetrics-report.xml
          destination: phpmetrics-report
      - store_artifacts:
          path: phpmetrics-report.json
          destination: phpmetrics-report

  phploc:
    executor: php-executor
    steps:
        - *attach_workspace
        - run:
            name: Get PHPLOC
            command: |
              wget https://phar.phpunit.de/phploc.phar
              php phploc.phar --version
              chmod +x phploc.phar
        - run:
            name: Run PHPLOC
            command:
                php phploc.phar . > result_phploc.txt
        - store_artifacts:
            path: result_phploc.txt
            destination: result_phploc

  security-docker-image:
    executor: simple-executor
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Trivy
          command: |
            # Télécharger Trivy dans le répertoire bin
            curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.tar.gz -o trivy.tar.gz
            # Extraire le fichier téléchargé
            tar zxvf trivy.tar.gz
            # Déplacer l'exécutable dans /usr/local/bin pour qu'il soit accessible globalement
            sudo mv trivy /usr/local/bin/
      - run:
          name: Build Docker Image
          command: |
            docker build -f Docker/Dockerfile -t image_test:latest .
      - run:
          name: Scan Docker Image with Trivy
          command: |
            trivy image --no-progress image_test:latest > trivy_results.txt
      - store_artifacts:
          path: trivy_results.txt
          destination: trivy_scan_results

workflows:

  metrics_workflow:
    jobs:
      - debug-info
      - build-setup
      - quality_check:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - phpmetrics:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - lint-phpcs:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - phploc:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging
                - develop

  security_workflow:
    jobs:
      - debug-info
      - build-setup
      - security-check-dependencies:
          requires:
            - build-setup
      - security-docker-image:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main 
                - staging
                - develop 

  # Workflow de Tests
  tests_workflow:
    jobs:
      - debug-info
      - build-setup
      - test-phpunit:
          requires:
            - build-setup
      - test-phpunit-feature:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging
                - develop
      - test-end-to-end:
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging

  #Workflow de déploiement
  deployment_workflow:
    jobs:
      - build-setup
      - build-docker-image:
          filters:
            branches:
              only:
                - main
                - staging
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/
      - hold-for-deployment:
          type: approval
          requires:
            - build-setup
          filters:
            branches:
              only:
                - main
                - staging
      - deploy-ssh-production:
          requires:
            - hold-for-deployment
            - build-docker-image
          filters:
            branches:
              only:
                - main
      - deploy-ssh-staging:
          requires:
            - hold-for-deployment
            - build-docker-image
          filters:
            branches:
              only:
                - staging

  

          